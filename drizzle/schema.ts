import { pgTable, foreignKey, uuid, varchar, integer, timestamp, text, boolean, serial, index, unique, jsonb, numeric, date } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"



export const kanbanColumns = pgTable("kanban_columns", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	boardId: uuid("board_id").notNull(),
	name: varchar({ length: 255 }).notNull(),
	position: integer().notNull(),
	color: varchar({ length: 50 }).default('#6b7280'),
	limitWip: integer("limit_wip"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	foreignKey({
			columns: [table.boardId],
			foreignColumns: [kanbanBoards.id],
			name: "kanban_columns_board_id_kanban_boards_id_fk"
		}),
]);

export const kanbanBoards = pgTable("kanban_boards", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	name: varchar({ length: 255 }).notNull(),
	description: text(),
	dealerId: uuid("dealer_id").notNull(),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	isDefault: boolean("is_default").default(false).notNull(),
	color: varchar({ length: 50 }).default('#3b82f6'),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "kanban_boards_dealer_id_dealers_id_fk"
		}),
]);

export const kanbanTaskComments = pgTable("kanban_task_comments", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	taskId: uuid("task_id").notNull(),
	userId: varchar("user_id", { length: 255 }).notNull(),
	comment: text().notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	foreignKey({
			columns: [table.taskId],
			foreignColumns: [kanbanTasks.id],
			name: "kanban_task_comments_task_id_kanban_tasks_id_fk"
		}),
]);

export const requests = pgTable("requests", {
	id: serial().primaryKey().notNull(),
	inquiryId: integer("inquiry_id").notNull(),
	status: varchar({ length: 50 }).default('pending').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	assignedTo: uuid("assigned_to"),
	advertisementId: varchar("advertisement_id", { length: 255 }),
	companyName: varchar("company_name", { length: 255 }),
	key: varchar({ length: 255 }),
	secret: varchar({ length: 255 }),
}, (table) => [
	foreignKey({
			columns: [table.assignedTo],
			foreignColumns: [dealers.id],
			name: "requests_assigned_to_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.inquiryId],
			foreignColumns: [inquiries.id],
			name: "requests_inquiry_id_inquiries_id_fk"
		}),
]);

export const inquiries = pgTable("inquiries", {
	id: serial().primaryKey().notNull(),
	name: varchar({ length: 255 }).notNull(),
	email: varchar({ length: 255 }).notNull(),
	message: text().notNull(),
	dealerId: uuid("dealer_id"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
});

export const storeConfig = pgTable("store_config", {
	id: serial().primaryKey().notNull(),
	joinSubmissionId: integer("join_submission_id").notNull(),
	email: varchar({ length: 255 }).notNull(),
	clerkUserId: varchar("clerk_user_id", { length: 255 }),
	clerkInvitationId: varchar("clerk_invitation_id", { length: 255 }),
	storeName: varchar("store_name", { length: 255 }).notNull(),
	storeType: varchar("store_type", { length: 100 }),
	invitationStatus: varchar("invitation_status", { length: 50 }).default('pending').notNull(),
	advertisementIds: text("advertisement_ids"),
	primaryAdvertisementId: varchar("primary_advertisement_id", { length: 255 }),
	autotraderKey: varchar("autotrader_key", { length: 500 }),
	autotraderSecret: varchar("autotrader_secret", { length: 500 }),
	dvlaApiKey: varchar("dvla_api_key", { length: 500 }),
	autotraderIntegrationId: varchar("autotrader_integration_id", { length: 255 }),
	companyName: varchar("company_name", { length: 255 }),
	companyLogo: text("company_logo"),
	assignedBy: uuid("assigned_by").notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	advertisementId: varchar("advertisement_id", { length: 255 }),
	additionalAdvertisementIds: text("additional_advertisement_ids"),
	companyLogoUrl: varchar("company_logo_url", { length: 500 }),
	assignedAt: timestamp("assigned_at", { mode: 'string' }).defaultNow(),
}, (table) => [
	foreignKey({
			columns: [table.assignedBy],
			foreignColumns: [dealers.id],
			name: "store_config_assigned_by_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.joinSubmissionId],
			foreignColumns: [joinSubmissions.id],
			name: "store_config_join_submission_id_join_submissions_id_fk"
		}),
]);

export const customInvoices = pgTable("custom_invoices", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	invoiceNumber: varchar("invoice_number", { length: 100 }).notNull(),
	invoiceDate: timestamp("invoice_date", { mode: 'string' }).notNull(),
	dueDate: timestamp("due_date", { mode: 'string' }),
	invoiceTitle: varchar("invoice_title", { length: 255 }).default('INVOICE'),
	invoiceType: varchar("invoice_type", { length: 50 }).default('standard').notNull(),
	customerName: varchar("customer_name", { length: 255 }),
	customerEmail: varchar("customer_email", { length: 255 }),
	customerPhone: varchar("customer_phone", { length: 50 }),
	customerAddress: jsonb("customer_address"),
	companyInfo: jsonb("company_info"),
	vehicleInfo: jsonb("vehicle_info"),
	deliveryAddress: jsonb("delivery_address"),
	items: jsonb().default([]).notNull(),
	subtotal: numeric({ precision: 10, scale:  2 }).default('0'),
	vatRate: numeric("vat_rate", { precision: 5, scale:  2 }).default('20.00'),
	vatAmount: numeric("vat_amount", { precision: 10, scale:  2 }).default('0'),
	total: numeric({ precision: 10, scale:  2 }).default('0'),
	vatMode: varchar("vat_mode", { length: 20 }).default('global'),
	discountMode: varchar("discount_mode", { length: 20 }).default('global'),
	globalDiscountType: varchar("global_discount_type", { length: 20 }).default('percentage'),
	globalDiscountValue: numeric("global_discount_value", { precision: 10, scale:  2 }).default('0'),
	globalDiscountAmount: numeric("global_discount_amount", { precision: 10, scale:  2 }).default('0'),
	totalDiscount: numeric("total_discount", { precision: 10, scale:  2 }).default('0'),
	subtotalAfterDiscount: numeric("subtotal_after_discount", { precision: 10, scale:  2 }).default('0'),
	paymentStatus: varchar("payment_status", { length: 20 }).default('unpaid'),
	payments: jsonb().default([]),
	paidAmount: numeric("paid_amount", { precision: 10, scale:  2 }).default('0'),
	outstandingBalance: numeric("outstanding_balance", { precision: 10, scale:  2 }).default('0'),
	notes: text(),
	terms: text(),
	paymentInstructions: varchar("payment_instructions", { length: 1000 }),
	status: varchar({ length: 50 }).default('draft').notNull(),
	pdfGenerated: boolean("pdf_generated").default(false),
	pdfUrl: text("pdf_url"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_custom_invoices_created_by").using("btree", table.createdBy.asc().nullsLast().op("text_ops")),
	index("idx_custom_invoices_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_custom_invoices_invoice_number").using("btree", table.invoiceNumber.asc().nullsLast().op("text_ops")),
	index("idx_custom_invoices_payment_status").using("btree", table.paymentStatus.asc().nullsLast().op("text_ops")),
	index("idx_custom_invoices_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "custom_invoices_dealer_id_dealers_id_fk"
		}),
	unique("custom_invoices_dealer_invoice_number_unique").on(table.dealerId, table.invoiceNumber),
]);

export const returnCosts = pgTable("return_costs", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	stockReference: varchar("stock_reference", { length: 255 }),
	registration: varchar({ length: 50 }),
	vatableCosts: jsonb("vatable_costs").default([]),
	nonVatableCosts: jsonb("non_vatable_costs").default([]),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_return_costs_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_return_costs_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "return_costs_dealer_id_dealers_id_fk"
		}),
]);

export const userAssignments = pgTable("user_assignments", {
	id: serial().primaryKey().notNull(),
	joinSubmissionId: integer("join_submission_id").notNull(),
	dealerId: uuid("dealer_id"),
	advertisementIds: text("advertisement_ids"),
	primaryAdvertisementId: varchar("primary_advertisement_id", { length: 255 }),
	autotraderKey: varchar("autotrader_key", { length: 500 }),
	autotraderSecret: varchar("autotrader_secret", { length: 500 }),
	dvlaApiKey: varchar("dvla_api_key", { length: 500 }),
	autotraderIntegrationId: varchar("autotrader_integration_id", { length: 255 }),
	companyName: varchar("company_name", { length: 255 }),
	companyLogo: text("company_logo"),
	assignedBy: uuid("assigned_by").notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	foreignKey({
			columns: [table.assignedBy],
			foreignColumns: [dealers.id],
			name: "user_assignments_assigned_by_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "user_assignments_dealer_id_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.joinSubmissionId],
			foreignColumns: [joinSubmissions.id],
			name: "user_assignments_join_submission_id_join_submissions_id_fk"
		}),
]);

export const dealers = pgTable("dealers", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	name: varchar({ length: 255 }).notNull(),
	email: varchar({ length: 255 }).notNull(),
	role: varchar({ length: 50 }).default('dealer').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	clerkUserId: varchar("clerk_user_id", { length: 255 }).notNull(),
	metadata: jsonb(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	unique("dealers_email_unique").on(table.email),
	unique("dealers_clerk_user_id_unique").on(table.clerkUserId),
]);

export const contactSubmissions = pgTable("contact_submissions", {
	id: serial().primaryKey().notNull(),
	name: varchar({ length: 255 }).notNull(),
	email: varchar({ length: 255 }).notNull(),
	company: varchar({ length: 255 }),
	phone: varchar({ length: 50 }),
	message: text().notNull(),
	inquiryType: varchar("inquiry_type", { length: 100 }).default('general').notNull(),
	status: varchar({ length: 50 }).default('pending').notNull(),
	dealerId: uuid("dealer_id"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
});

export const joinSubmissions = pgTable("join_submissions", {
	id: serial().primaryKey().notNull(),
	firstName: varchar("first_name", { length: 255 }).notNull(),
	lastName: varchar("last_name", { length: 255 }).notNull(),
	email: varchar({ length: 255 }).notNull(),
	phone: varchar({ length: 50 }),
	dealershipName: varchar("dealership_name", { length: 255 }).notNull(),
	dealershipType: varchar("dealership_type", { length: 100 }).notNull(),
	numberOfVehicles: varchar("number_of_vehicles", { length: 50 }),
	currentSystem: varchar("current_system", { length: 100 }),
	inquiryType: varchar("inquiry_type", { length: 100 }).notNull(),
	subject: varchar({ length: 255 }),
	message: text().notNull(),
	preferredContact: varchar("preferred_contact", { length: 50 }).default('email').notNull(),
	status: varchar({ length: 50 }).default('pending').notNull(),
	assignedTo: uuid("assigned_to"),
	notes: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
});

export const teamMembers = pgTable("team_members", {
	id: serial().primaryKey().notNull(),
	storeOwnerId: uuid("store_owner_id").notNull(),
	name: varchar({ length: 255 }).notNull(),
	email: varchar({ length: 255 }).notNull(),
	phone: varchar({ length: 50 }),
	role: varchar({ length: 50 }).default('employee').notNull(),
	status: varchar({ length: 50 }).default('pending').notNull(),
	clerkUserId: varchar("clerk_user_id", { length: 255 }),
	clerkInvitationId: varchar("clerk_invitation_id", { length: 255 }),
	invitationStatus: varchar("invitation_status", { length: 50 }).default('pending').notNull(),
	specialization: varchar({ length: 255 }),
	salesCount: integer("sales_count").default(0),
	performance: integer().default(0),
	revenue: integer().default(0),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("team_members_clerk_user_idx").using("btree", table.clerkUserId.asc().nullsLast().op("text_ops")),
	index("team_members_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
	index("team_members_role_idx").using("btree", table.role.asc().nullsLast().op("text_ops")),
	index("team_members_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("team_members_store_owner_idx").using("btree", table.storeOwnerId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.storeOwnerId],
			foreignColumns: [dealers.id],
			name: "team_members_store_owner_id_dealers_id_fk"
		}),
]);

export const stockCache = pgTable("stock_cache", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	advertiserId: varchar("advertiser_id", { length: 255 }).notNull(),
	make: varchar({ length: 100 }).notNull(),
	model: varchar({ length: 100 }).notNull(),
	derivative: varchar({ length: 255 }),
	registration: varchar({ length: 20 }),
	vin: varchar({ length: 50 }),
	yearOfManufacture: integer("year_of_manufacture"),
	odometerReadingMiles: integer("odometer_reading_miles"),
	fuelType: varchar("fuel_type", { length: 50 }),
	bodyType: varchar("body_type", { length: 50 }),
	forecourtPriceGbp: numeric("forecourt_price_gbp", { precision: 10, scale:  2 }),
	totalPriceGbp: numeric("total_price_gbp", { precision: 10, scale:  2 }),
	lifecycleState: varchar("lifecycle_state", { length: 50 }),
	ownershipCondition: varchar("ownership_condition", { length: 50 }),
	lastFetchedFromAutotrader: timestamp("last_fetched_from_autotrader", { mode: 'string' }).defaultNow().notNull(),
	isStale: boolean("is_stale").default(false).notNull(),
	autotraderVersionNumber: integer("autotrader_version_number"),
	vehicleData: jsonb("vehicle_data"),
	advertiserData: jsonb("advertiser_data"),
	advertsData: jsonb("adverts_data"),
	metadataRaw: jsonb("metadata_raw"),
	featuresData: jsonb("features_data"),
	mediaData: jsonb("media_data"),
	historyData: jsonb("history_data"),
	checkData: jsonb("check_data"),
	highlightsData: jsonb("highlights_data"),
	valuationsData: jsonb("valuations_data"),
	responseMetricsData: jsonb("response_metrics_data"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	motStatus: varchar("mot_status", { length: 50 }),
	motExpiryDate: timestamp("mot_expiry_date", { mode: 'string' }),
	dvlaLastChecked: timestamp("dvla_last_checked", { mode: 'string' }),
	dvlaDataRaw: jsonb("dvla_data_raw"),
}, (table) => [
	index("idx_stock_cache_advertiser_id").using("btree", table.advertiserId.asc().nullsLast().op("text_ops")),
	index("idx_stock_cache_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_stock_cache_last_fetched").using("btree", table.lastFetchedFromAutotrader.asc().nullsLast().op("timestamp_ops")),
	index("idx_stock_cache_lifecycle_state").using("btree", table.lifecycleState.asc().nullsLast().op("text_ops")),
	index("idx_stock_cache_make_model").using("btree", table.make.asc().nullsLast().op("text_ops"), table.model.asc().nullsLast().op("text_ops")),
	index("idx_stock_cache_price").using("btree", table.forecourtPriceGbp.asc().nullsLast().op("numeric_ops")),
	index("idx_stock_cache_stale").using("btree", table.isStale.asc().nullsLast().op("bool_ops")),
	index("idx_stock_cache_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	index("idx_stock_cache_year_mileage").using("btree", table.yearOfManufacture.asc().nullsLast().op("int4_ops"), table.odometerReadingMiles.asc().nullsLast().op("int4_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "stock_cache_dealer_id_dealers_id_fk"
		}),
	unique("stock_cache_stock_id_unique").on(table.stockId),
]);

export const stockCacheSyncLog = pgTable("stock_cache_sync_log", {
	id: serial().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	advertiserId: varchar("advertiser_id", { length: 255 }).notNull(),
	syncType: varchar("sync_type", { length: 50 }).notNull(),
	startTime: timestamp("start_time", { mode: 'string' }).defaultNow().notNull(),
	endTime: timestamp("end_time", { mode: 'string' }),
	status: varchar({ length: 50 }).default('in_progress').notNull(),
	recordsProcessed: integer("records_processed").default(0),
	recordsUpdated: integer("records_updated").default(0),
	recordsCreated: integer("records_created").default(0),
	recordsDeleted: integer("records_deleted").default(0),
	errorMessage: text("error_message"),
	autotraderApiCalls: integer("autotrader_api_calls").default(0),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_sync_log_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_sync_log_start_time").using("btree", table.startTime.asc().nullsLast().op("timestamp_ops")),
	index("idx_sync_log_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "stock_cache_sync_log_dealer_id_dealers_id_fk"
		}),
]);

export const templates = pgTable("templates", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	name: varchar({ length: 255 }).notNull(),
	description: text(),
	category: varchar({ length: 50 }).notNull(),
	fileName: varchar("file_name", { length: 255 }).notNull(),
	supabaseFileName: varchar("supabase_file_name", { length: 255 }).notNull(),
	publicUrl: text("public_url").notNull(),
	fileSize: integer("file_size").notNull(),
	mimeType: varchar("mime_type", { length: 100 }).notNull(),
	tags: jsonb(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("templates_category_idx").using("btree", table.category.asc().nullsLast().op("text_ops")),
	index("templates_dealer_idx").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "templates_dealer_fk"
		}),
]);

export const customTerms = pgTable("custom_terms", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: varchar("dealer_id", { length: 255 }).notNull(),
	checklistTerms: text("checklist_terms").default('),
	basicTerms: text("basic_terms").default('),
	inHouseWarrantyTerms: text("in_house_warranty_terms").default('),
	thirdPartyTerms: text("third_party_terms").default('),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	tradeTerms: text("trade_terms").default('),
}, (table) => [
	index("custom_terms_dealer_id_idx").using("btree", table.dealerId.asc().nullsLast().op("text_ops")),
	unique("unique_dealer_terms").on(table.dealerId),
]);

export const vehicleCosts = pgTable("vehicle_costs", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	transportIn: numeric("transport_in", { precision: 10, scale:  2 }),
	transportOut: numeric("transport_out", { precision: 10, scale:  2 }),
	mot: numeric({ precision: 10, scale:  2 }),
	exVatCosts: jsonb("ex_vat_costs"),
	incVatCosts: jsonb("inc_vat_costs"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	registration: varchar({ length: 50 }),
	fixedCostsTotal: numeric("fixed_costs_total", { precision: 10, scale:  2 }),
	exVatCostsTotal: numeric("ex_vat_costs_total", { precision: 10, scale:  2 }),
	incVatCostsTotal: numeric("inc_vat_costs_total", { precision: 10, scale:  2 }),
	grandTotal: numeric("grand_total", { precision: 10, scale:  2 }),
}, (table) => [
	index("idx_vehicle_costs_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_vehicle_costs_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "vehicle_costs_dealer_id_dealers_id_fk"
		}),
]);

export const vehicleChecklist = pgTable("vehicle_checklist", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	userManual: text("user_manual"),
	numberOfKeys: text("number_of_keys"),
	serviceBook: text("service_book"),
	wheelLockingNut: text("wheel_locking_nut"),
	cambeltChainConfirmation: text("cambelt_chain_confirmation"),
	completionPercentage: integer("completion_percentage").default(0),
	isComplete: boolean("is_complete").default(false),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	registration: varchar({ length: 50 }),
	metadata: jsonb(),
}, (table) => [
	index("idx_vehicle_checklist_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_vehicle_checklist_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "vehicle_checklist_dealer_id_dealers_id_fk"
		}),
]);

export const inventoryDetails = pgTable("inventory_details", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	dateOfPurchase: timestamp("date_of_purchase", { mode: 'string' }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	registration: varchar({ length: 50 }),
	costOfPurchase: numeric("cost_of_purchase", { precision: 10, scale:  2 }),
	fundingAmount: numeric("funding_amount", { precision: 10, scale:  2 }),
	fundingSourceId: uuid("funding_source_id"),
	businessAmount: numeric("business_amount", { precision: 10, scale:  2 }),
	purchaseFrom: varchar("purchase_from", { length: 255 }),
}, (table) => [
	index("idx_inventory_details_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_inventory_details_funding_source_id").using("btree", table.fundingSourceId.asc().nullsLast().op("uuid_ops")),
	index("idx_inventory_details_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "inventory_details_dealer_id_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.fundingSourceId],
			foreignColumns: [fundSources.id],
			name: "inventory_details_funding_source_id_fund_sources_id_fk"
		}),
	unique("inventory_details_stock_id_unique").on(table.stockId),
]);

export const detailedMargins = pgTable("detailed_margins", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	outlayOnVehicle: numeric("outlay_on_vehicle", { precision: 10, scale:  2 }),
	vatOnSpend: numeric("vat_on_spend", { precision: 10, scale:  2 }),
	vatOnPurchase: numeric("vat_on_purchase", { precision: 10, scale:  2 }),
	vatOnSalePrice: numeric("vat_on_sale_price", { precision: 10, scale:  2 }),
	profitMarginPreCosts: numeric("profit_margin_pre_costs", { precision: 10, scale:  2 }),
	profitMarginPostCosts: numeric("profit_margin_post_costs", { precision: 10, scale:  2 }),
	profitMarginPreVat: numeric("profit_margin_pre_vat", { precision: 10, scale:  2 }),
	profitMarginPostVat: numeric("profit_margin_post_vat", { precision: 10, scale:  2 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	registration: varchar({ length: 50 }),
	vatToPay: numeric("vat_to_pay", { precision: 10, scale:  2 }),
}, (table) => [
	index("idx_detailed_margins_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_detailed_margins_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "detailed_margins_dealer_id_dealers_id_fk"
		}),
]);

export const invoices = pgTable("invoices", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	invoiceNumber: varchar("invoice_number", { length: 100 }).notNull(),
	customerAddress: jsonb("customer_address"),
	warrantyPrice: numeric("warranty_price", { precision: 10, scale:  2 }),
	status: varchar({ length: 50 }).default('draft').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	collection: varchar({ length: 50 }).default('FREE'),
	stockReference: varchar("stock_reference", { length: 255 }),
	registration: varchar({ length: 50 }),
	invoiceTo: varchar("invoice_to", { length: 255 }),
	vehicleRegistration: varchar("vehicle_registration", { length: 50 }),
	make: varchar({ length: 100 }),
	model: varchar({ length: 100 }),
	colour: varchar({ length: 50 }),
	vin: varchar({ length: 100 }),
	derivative: varchar({ length: 255 }),
	fuelType: varchar("fuel_type", { length: 50 }),
	engineNumber: varchar("engine_number", { length: 100 }),
	engineCapacity: varchar("engine_capacity", { length: 50 }),
	firstRegDate: timestamp("first_reg_date", { mode: 'string' }),
	saleType: varchar("sale_type", { length: 50 }),
	salePrice: numeric("sale_price", { precision: 10, scale:  2 }),
	dateOfSale: timestamp("date_of_sale", { mode: 'string' }),
	monthOfSale: varchar("month_of_sale", { length: 20 }),
	quarterOfSale: integer("quarter_of_sale"),
	costOfPurchase: numeric("cost_of_purchase", { precision: 10, scale:  2 }),
	dateOfPurchase: timestamp("date_of_purchase", { mode: 'string' }),
	daysInStock: integer("days_in_stock"),
	customerTitle: varchar("customer_title", { length: 20 }),
	customerFirstName: varchar("customer_first_name", { length: 255 }),
	customerMiddleName: varchar("customer_middle_name", { length: 255 }),
	customerSurname: varchar("customer_surname", { length: 255 }),
	customerContactNumber: varchar("customer_contact_number", { length: 50 }),
	customerEmailAddress: varchar("customer_email_address", { length: 255 }),
	financeCompany: varchar("finance_company", { length: 255 }),
	financeCompanyName: varchar("finance_company_name", { length: 255 }),
	financeAddress: text("finance_address"),
	warrantyLevel: varchar("warranty_level", { length: 100 }),
	warrantyDetails: text("warranty_details"),
	addons: jsonb(),
	depositAmount: numeric("deposit_amount", { precision: 10, scale:  2 }),
	deliveryDate: timestamp("delivery_date", { mode: 'string' }),
	deliveryLocation: varchar("delivery_location", { length: 255 }),
	discounts: jsonb(),
	payments: jsonb(),
	totalBalance: numeric("total_balance", { precision: 10, scale:  2 }),
	outstandingBalance: numeric("outstanding_balance", { precision: 10, scale:  2 }),
	checklistValidated: boolean("checklist_validated").default(false),
	additionalData: jsonb("additional_data"),
}, (table) => [
	index("idx_invoices_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_invoices_invoice_number").using("btree", table.invoiceNumber.asc().nullsLast().op("text_ops")),
	index("idx_invoices_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_invoices_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "invoices_dealer_id_dealers_id_fk"
		}),
	unique("invoices_invoice_number_unique").on(table.invoiceNumber),
]);

export const stockImages = pgTable("stock_images", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	name: varchar({ length: 255 }).notNull(),
	description: text(),
	fileName: varchar("file_name", { length: 255 }).notNull(),
	supabaseFileName: varchar("supabase_file_name", { length: 255 }).notNull(),
	publicUrl: text("public_url").notNull(),
	fileSize: integer("file_size").notNull(),
	mimeType: varchar("mime_type", { length: 100 }).notNull(),
	tags: jsonb(),
	vehicleType: varchar("vehicle_type", { length: 100 }),
	imageType: varchar("image_type", { length: 50 }),
	isDefault: boolean("is_default").default(false),
	sortOrder: integer("sort_order").default(0),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("stock_images_dealer_idx").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("stock_images_default_idx").using("btree", table.isDefault.asc().nullsLast().op("bool_ops")),
	index("stock_images_image_type_idx").using("btree", table.imageType.asc().nullsLast().op("text_ops")),
	index("stock_images_vehicle_type_idx").using("btree", table.vehicleType.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "stock_images_dealer_fk"
		}),
]);

export const customers = pgTable("customers", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	firstName: varchar("first_name", { length: 255 }).notNull(),
	lastName: varchar("last_name", { length: 255 }).notNull(),
	email: varchar({ length: 255 }),
	phone: varchar({ length: 50 }),
	dateOfBirth: timestamp("date_of_birth", { mode: 'string' }),
	addressLine1: varchar("address_line_1", { length: 255 }),
	addressLine2: varchar("address_line_2", { length: 255 }),
	city: varchar({ length: 100 }),
	county: varchar({ length: 100 }),
	postcode: varchar({ length: 20 }),
	country: varchar({ length: 100 }).default('United Kingdom'),
	marketingConsent: boolean("marketing_consent").default(false),
	salesConsent: boolean("sales_consent").default(false),
	gdprConsent: boolean("gdpr_consent").default(false),
	consentDate: timestamp("consent_date", { mode: 'string' }),
	notes: text(),
	customerSource: varchar("customer_source", { length: 100 }),
	preferredContactMethod: varchar("preferred_contact_method", { length: 50 }).default('email'),
	status: varchar({ length: 50 }).default('active'),
	tags: jsonb(),
	customFields: jsonb("custom_fields"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	enquiryType: varchar("enquiry_type", { length: 100 }),
}, (table) => [
	index("customers_dealer_id_idx").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("customers_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")).where(sql`(email IS NOT NULL)`),
	index("customers_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
]);

export const notifications = pgTable("notifications", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	recipientId: uuid("recipient_id").notNull(),
	recipientType: varchar("recipient_type", { length: 50 }).default('user').notNull(),
	senderId: uuid("sender_id"),
	type: varchar({ length: 100 }).notNull(),
	title: varchar({ length: 255 }).notNull(),
	message: text().notNull(),
	priority: varchar({ length: 20 }).default('medium').notNull(),
	entityType: varchar("entity_type", { length: 50 }),
	entityId: varchar("entity_id", { length: 255 }),
	metadata: jsonb(),
	actionUrl: varchar("action_url", { length: 500 }),
	actionLabel: varchar("action_label", { length: 100 }),
	channels: text().array().default(["in_app"]).notNull(),
	isRead: boolean("is_read").default(false).notNull(),
	isArchived: boolean("is_archived").default(false).notNull(),
	readAt: timestamp("read_at", { mode: 'string' }),
	scheduledFor: timestamp("scheduled_for", { mode: 'string' }),
	expiresAt: timestamp("expires_at", { mode: 'string' }),
	groupKey: varchar("group_key", { length: 255 }),
	batchId: uuid("batch_id"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_notifications_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_notifications_entity").using("btree", table.entityType.asc().nullsLast().op("text_ops"), table.entityId.asc().nullsLast().op("text_ops")),
	index("idx_notifications_expires_at").using("btree", table.expiresAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_notifications_group_key").using("btree", table.groupKey.asc().nullsLast().op("text_ops")),
	index("idx_notifications_is_read").using("btree", table.isRead.asc().nullsLast().op("bool_ops")),
	index("idx_notifications_priority").using("btree", table.priority.asc().nullsLast().op("text_ops")),
	index("idx_notifications_recipient").using("btree", table.recipientId.asc().nullsLast().op("uuid_ops")),
	index("idx_notifications_scheduled_for").using("btree", table.scheduledFor.asc().nullsLast().op("timestamp_ops")),
	index("idx_notifications_type").using("btree", table.type.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.recipientId],
			foreignColumns: [dealers.id],
			name: "notifications_recipient_id_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.senderId],
			foreignColumns: [dealers.id],
			name: "notifications_sender_id_dealers_id_fk"
		}),
]);

export const notificationDeliveryLog = pgTable("notification_delivery_log", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	notificationId: uuid("notification_id").notNull(),
	channel: varchar({ length: 20 }).notNull(),
	status: varchar({ length: 20 }).notNull(),
	provider: varchar({ length: 50 }),
	providerId: varchar("provider_id", { length: 255 }),
	recipientAddress: varchar("recipient_address", { length: 255 }),
	errorMessage: text("error_message"),
	responseData: jsonb("response_data"),
	sentAt: timestamp("sent_at", { mode: 'string' }),
	deliveredAt: timestamp("delivered_at", { mode: 'string' }),
	failedAt: timestamp("failed_at", { mode: 'string' }),
	retryCount: integer("retry_count").default(0),
	nextRetryAt: timestamp("next_retry_at", { mode: 'string' }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_delivery_log_channel").using("btree", table.channel.asc().nullsLast().op("text_ops")),
	index("idx_delivery_log_next_retry").using("btree", table.nextRetryAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_delivery_log_notification").using("btree", table.notificationId.asc().nullsLast().op("uuid_ops")),
	index("idx_delivery_log_sent_at").using("btree", table.sentAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_delivery_log_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.notificationId],
			foreignColumns: [notifications.id],
			name: "notification_delivery_log_notification_id_notifications_id_fk"
		}),
]);

export const notificationPreferences = pgTable("notification_preferences", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	userId: uuid("user_id").notNull(),
	isEnabled: boolean("is_enabled").default(true).notNull(),
	quietHoursStart: varchar("quiet_hours_start", { length: 5 }),
	quietHoursEnd: varchar("quiet_hours_end", { length: 5 }),
	timezone: varchar({ length: 50 }).default('Europe/London'),
	emailPreferences: jsonb("email_preferences").default({}),
	smsPreferences: jsonb("sms_preferences").default({}),
	pushPreferences: jsonb("push_preferences").default({}),
	inAppPreferences: jsonb("in_app_preferences").default({}),
	minPriorityEmail: varchar("min_priority_email", { length: 20 }).default('medium'),
	minPrioritySms: varchar("min_priority_sms", { length: 20 }).default('high'),
	minPriorityPush: varchar("min_priority_push", { length: 20 }).default('medium'),
	digestFrequency: varchar("digest_frequency", { length: 20 }).default('daily'),
	maxNotificationsPerHour: integer("max_notifications_per_hour").default(10),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_notification_preferences_user").using("btree", table.userId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.userId],
			foreignColumns: [dealers.id],
			name: "notification_preferences_user_id_dealers_id_fk"
		}),
]);

export const notificationTemplates = pgTable("notification_templates", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id"),
	type: varchar({ length: 100 }).notNull(),
	name: varchar({ length: 255 }).notNull(),
	description: text(),
	titleTemplate: varchar("title_template", { length: 255 }).notNull(),
	messageTemplate: text("message_template").notNull(),
	defaultPriority: varchar("default_priority", { length: 20 }).default('medium'),
	defaultChannels: text("default_channels").array().default(["in_app"]),
	variables: jsonb(),
	isActive: boolean("is_active").default(true).notNull(),
	isSystem: boolean("is_system").default(false).notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_notification_templates_dealer").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_notification_templates_is_active").using("btree", table.isActive.asc().nullsLast().op("bool_ops")),
	index("idx_notification_templates_type").using("btree", table.type.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "notification_templates_dealer_id_dealers_id_fk"
		}),
]);

export const testDriveEntries = pgTable("test_drive_entries", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	vehicleRegistration: varchar("vehicle_registration", { length: 20 }).notNull(),
	vehicleMake: varchar("vehicle_make", { length: 100 }).notNull(),
	vehicleModel: varchar("vehicle_model", { length: 100 }).notNull(),
	vehicleYear: varchar("vehicle_year", { length: 4 }),
	drivingLicenseFile: varchar("driving_license_file", { length: 500 }),
	status: varchar({ length: 50 }).default('scheduled'),
	notes: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	testDriveDate: timestamp("test_drive_date", { mode: 'string' }).notNull(),
	testDriveTime: varchar("test_drive_time", { length: 10 }).notNull(),
	estimatedDuration: integer("estimated_duration").notNull(),
	customerName: varchar("customer_name", { length: 255 }).notNull(),
	customerEmail: varchar("customer_email", { length: 255 }).notNull(),
	customerPhone: varchar("customer_phone", { length: 50 }),
	addressSameAsId: varchar("address_same_as_id", { length: 10 }).notNull(),
	addressLine1: varchar("address_line_1", { length: 255 }),
	addressLine2: varchar("address_line_2", { length: 255 }),
	city: varchar({ length: 100 }),
	county: varchar({ length: 100 }),
	postcode: varchar({ length: 20 }),
	country: varchar({ length: 100 }).default('United Kingdom'),
}, (table) => [
	index("test_drive_entries_customer_email_idx").using("btree", table.customerEmail.asc().nullsLast().op("text_ops")),
	index("test_drive_entries_date_idx").using("btree", table.testDriveDate.asc().nullsLast().op("timestamp_ops")),
	index("test_drive_entries_dealer_id_idx").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("test_drive_entries_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
]);

export const vehicleDocuments = pgTable("vehicle_documents", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	stockId: varchar("stock_id", { length: 255 }),
	registration: varchar({ length: 20 }).notNull(),
	documentName: varchar("document_name", { length: 255 }).notNull(),
	documentType: varchar("document_type", { length: 100 }).notNull(),
	description: text(),
	fileName: varchar("file_name", { length: 255 }).notNull(),
	supabaseFileName: varchar("supabase_file_name", { length: 255 }).notNull(),
	publicUrl: text("public_url").notNull(),
	fileSize: integer("file_size").notNull(),
	mimeType: varchar("mime_type", { length: 100 }).notNull(),
	tags: jsonb(),
	isRequired: boolean("is_required").default(false),
	isVerified: boolean("is_verified").default(false),
	verifiedBy: varchar("verified_by", { length: 255 }),
	verifiedAt: timestamp("verified_at", { mode: 'string' }),
	expiryDate: timestamp("expiry_date", { mode: 'string' }),
	documentDate: timestamp("document_date", { mode: 'string' }),
	uploadedBy: varchar("uploaded_by", { length: 255 }).notNull(),
	uploadSource: varchar("upload_source", { length: 50 }).default('manual').notNull(),
	status: varchar({ length: 50 }).default('active').notNull(),
	visibility: varchar({ length: 50 }).default('internal').notNull(),
	metadata: jsonb(),
	sortOrder: integer("sort_order").default(0),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_vehicle_documents_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_vehicle_documents_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_vehicle_documents_document_type").using("btree", table.documentType.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_documents_expiry_date").using("btree", table.expiryDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_vehicle_documents_reg_dealer").using("btree", table.registration.asc().nullsLast().op("uuid_ops"), table.dealerId.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_documents_registration").using("btree", table.registration.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_documents_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_documents_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_documents_uploaded_by").using("btree", table.uploadedBy.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "vehicle_documents_dealer_id_dealers_id_fk"
		}),
]);

export const documentAccessLog = pgTable("document_access_log", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	documentId: uuid("document_id").notNull(),
	userId: varchar("user_id", { length: 255 }).notNull(),
	action: varchar({ length: 50 }).notNull(),
	ipAddress: varchar("ip_address", { length: 45 }),
	userAgent: text("user_agent"),
	metadata: jsonb(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_document_access_log_action").using("btree", table.action.asc().nullsLast().op("text_ops")),
	index("idx_document_access_log_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_document_access_log_document_id").using("btree", table.documentId.asc().nullsLast().op("uuid_ops")),
	index("idx_document_access_log_user_id").using("btree", table.userId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.documentId],
			foreignColumns: [vehicleDocuments.id],
			name: "document_access_log_document_id_vehicle_documents_id_fk"
		}),
]);

export const documentCategories = pgTable("document_categories", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id"),
	categoryName: varchar("category_name", { length: 100 }).notNull(),
	displayName: varchar("display_name", { length: 255 }).notNull(),
	description: text(),
	isRequired: boolean("is_required").default(false),
	hasExpiry: boolean("has_expiry").default(false),
	acceptsMultiple: boolean("accepts_multiple").default(true),
	allowedMimeTypes: jsonb("allowed_mime_types"),
	maxFileSizeMb: integer("max_file_size_mb").default(10),
	isSystem: boolean("is_system").default(false),
	isActive: boolean("is_active").default(true),
	sortOrder: integer("sort_order").default(0),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_document_categories_category_name").using("btree", table.categoryName.asc().nullsLast().op("text_ops")),
	index("idx_document_categories_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_document_categories_is_active").using("btree", table.isActive.asc().nullsLast().op("bool_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "document_categories_dealer_id_dealers_id_fk"
		}),
]);

export const kanbanTasks = pgTable("kanban_tasks", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	boardId: uuid("board_id").notNull(),
	columnId: uuid("column_id").notNull(),
	title: varchar({ length: 500 }).notNull(),
	description: text(),
	priority: varchar({ length: 20 }).default('medium').notNull(),
	assignedTo: varchar("assigned_to", { length: 255 }),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	dueDate: timestamp("due_date", { mode: 'string' }),
	position: integer().notNull(),
	tags: text().array(),
	checklist: jsonb(),
	attachments: jsonb(),
	stockId: varchar("stock_id", { length: 255 }),
	estimatedHours: integer("estimated_hours"),
	actualHours: integer("actual_hours"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	foreignKey({
			columns: [table.boardId],
			foreignColumns: [kanbanBoards.id],
			name: "kanban_tasks_board_id_kanban_boards_id_fk"
		}),
	foreignKey({
			columns: [table.columnId],
			foreignColumns: [kanbanColumns.id],
			name: "kanban_tasks_column_id_kanban_columns_id_fk"
		}),
]);

export const costCategories = pgTable("cost_categories", {
	id: serial().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	name: varchar({ length: 100 }).notNull(),
	description: text(),
	color: varchar({ length: 7 }).default('#6B7280'),
	icon: varchar({ length: 50 }),
	isDefault: boolean("is_default").default(false),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_cost_categories_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "cost_categories_dealer_id_dealers_id_fk"
		}),
	unique("unique_dealer_category_name").on(table.dealerId, table.name),
]);

export const dealershipCosts = pgTable("dealership_costs", {
	id: serial().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	description: varchar({ length: 500 }).notNull(),
	amount: numeric({ precision: 10, scale:  2 }).notNull(),
	hasVat: boolean("has_vat").default(false).notNull(),
	vatAmount: numeric("vat_amount", { precision: 10, scale:  2 }),
	totalAmount: numeric("total_amount", { precision: 10, scale:  2 }).notNull(),
	costType: varchar("cost_type", { length: 50 }).notNull(),
	frequency: varchar({ length: 20 }),
	category: varchar({ length: 100 }).notNull(),
	startDate: date("start_date"),
	endDate: date("end_date"),
	dueDate: date("due_date"),
	status: varchar({ length: 20 }).default('active').notNull(),
	notes: text(),
	isPaid: boolean("is_paid").default(false).notNull(),
	paidDate: date("paid_date"),
	paymentMethod: varchar("payment_method", { length: 50 }),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	updatedBy: varchar("updated_by", { length: 255 }),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_dealership_costs_category").using("btree", table.category.asc().nullsLast().op("text_ops")),
	index("idx_dealership_costs_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_dealership_costs_due_date").using("btree", table.dueDate.asc().nullsLast().op("date_ops")),
	index("idx_dealership_costs_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "dealership_costs_dealer_id_dealers_id_fk"
		}),
]);

export const businesses = pgTable("businesses", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	businessName: varchar("business_name", { length: 255 }).notNull(),
	email: varchar({ length: 255 }),
	phone: varchar({ length: 50 }),
	vatNumber: varchar("vat_number", { length: 50 }),
	companyNumber: varchar("company_number", { length: 50 }),
	addressLine1: varchar("address_line_1", { length: 255 }),
	addressLine2: varchar("address_line_2", { length: 255 }),
	city: varchar({ length: 100 }),
	county: varchar({ length: 100 }),
	postcode: varchar({ length: 20 }),
	country: varchar({ length: 100 }).default('United Kingdom'),
	notes: text(),
	businessSource: varchar("business_source", { length: 100 }),
	preferredContactMethod: varchar("preferred_contact_method", { length: 50 }).default('email'),
	status: varchar({ length: 50 }).default('active'),
	tags: jsonb(),
	customFields: jsonb("custom_fields"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("businesses_business_name_idx").using("btree", table.businessName.asc().nullsLast().op("text_ops")),
	index("businesses_company_number_idx").using("btree", table.companyNumber.asc().nullsLast().op("text_ops")),
	index("businesses_dealer_id_idx").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("businesses_email_idx").using("btree", table.email.asc().nullsLast().op("text_ops")),
	index("businesses_status_idx").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("businesses_vat_number_idx").using("btree", table.vatNumber.asc().nullsLast().op("text_ops")),
]);

export const fundSources = pgTable("fund_sources", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	fundName: varchar("fund_name", { length: 255 }).notNull(),
	amount: numeric({ precision: 12, scale:  2 }).notNull(),
	address: text(),
	contactPersonName: varchar("contact_person_name", { length: 255 }),
	mobileNumber: varchar("mobile_number", { length: 50 }),
	contactEmail: varchar("contact_email", { length: 255 }),
	description: text(),
	interestRate: numeric("interest_rate", { precision: 5, scale:  2 }),
	repaymentTerms: text("repayment_terms"),
	status: varchar({ length: 50 }).default('active').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_fund_sources_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_fund_sources_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "fund_sources_dealer_id_dealers_id_fk"
		}),
	unique("unique_dealer_fund_name").on(table.dealerId, table.fundName),
]);

export const fundTransactions = pgTable("fund_transactions", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	fundSourceId: uuid("fund_source_id").notNull(),
	transactionType: varchar("transaction_type", { length: 50 }).notNull(),
	amount: numeric({ precision: 12, scale:  2 }).notNull(),
	description: text(),
	referenceNumber: varchar("reference_number", { length: 100 }),
	vehicleStockId: varchar("vehicle_stock_id", { length: 255 }),
	transactionDate: timestamp("transaction_date", { mode: 'string' }).defaultNow().notNull(),
	dueDate: timestamp("due_date", { mode: 'string' }),
	status: varchar({ length: 50 }).default('completed').notNull(),
	notes: text(),
	attachments: jsonb(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_fund_transactions_date").using("btree", table.transactionDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_fund_transactions_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_fund_transactions_fund_source_id").using("btree", table.fundSourceId.asc().nullsLast().op("uuid_ops")),
	index("idx_fund_transactions_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_fund_transactions_type").using("btree", table.transactionType.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "fund_transactions_dealer_id_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.fundSourceId],
			foreignColumns: [fundSources.id],
			name: "fund_transactions_fund_source_id_fund_sources_id_fk"
		}),
]);

export const vehicleJobCards = pgTable("vehicle_job_cards", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	registration: varchar({ length: 50 }).notNull(),
	jobType: varchar("job_type", { length: 500 }).notNull(),
	garageDetails: text("garage_details"),
	jobCategory: varchar("job_category", { length: 100 }).notNull(),
	status: varchar({ length: 50 }).default('todo').notNull(),
	priority: varchar({ length: 20 }).default('medium').notNull(),
	estimatedHours: integer("estimated_hours"),
	actualHours: integer("actual_hours"),
	startedAt: timestamp("started_at", { mode: 'string' }),
	completedAt: timestamp("completed_at", { mode: 'string' }),
	estimatedCost: numeric("estimated_cost", { precision: 10, scale:  2 }),
	actualCost: numeric("actual_cost", { precision: 10, scale:  2 }),
	costDescription: text("cost_description"),
	costsSubmitted: boolean("costs_submitted").default(false),
	costsSubmittedAt: timestamp("costs_submitted_at", { mode: 'string' }),
	assignedTo: varchar("assigned_to", { length: 255 }),
	createdBy: varchar("created_by", { length: 255 }).notNull(),
	notes: text(),
	customerNotes: text("customer_notes"),
	attachments: jsonb(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	dueDate: timestamp("due_date", { mode: 'string' }),
	jobs: jsonb(),
}, (table) => [
	index("idx_vehicle_job_cards_assigned_to").using("btree", table.assignedTo.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_job_cards_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_vehicle_job_cards_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_vehicle_job_cards_dealer_registration").using("btree", table.dealerId.asc().nullsLast().op("text_ops"), table.registration.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_job_cards_dealer_status").using("btree", table.dealerId.asc().nullsLast().op("text_ops"), table.status.asc().nullsLast().op("uuid_ops")),
	index("idx_vehicle_job_cards_job_category").using("btree", table.jobCategory.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_job_cards_registration").using("btree", table.registration.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_job_cards_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_vehicle_job_cards_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "vehicle_job_cards_dealer_id_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.stockId],
			foreignColumns: [stockCache.stockId],
			name: "vehicle_job_cards_stock_id_stock_cache_stock_id_fk"
		}),
]);

export const tempInvoiceData = pgTable("temp_invoice_data", {
	id: serial().primaryKey().notNull(),
	tempId: varchar("temp_id", { length: 100 }).notNull(),
	userId: varchar("user_id", { length: 255 }).notNull(),
	data: jsonb().notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	expiresAt: timestamp("expires_at", { mode: 'string' }).notNull(),
}, (table) => [
	index("idx_temp_invoice_data_expires_at").using("btree", table.expiresAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_temp_invoice_data_temp_id").using("btree", table.tempId.asc().nullsLast().op("text_ops")),
	index("idx_temp_invoice_data_user_id").using("btree", table.userId.asc().nullsLast().op("text_ops")),
	unique("temp_invoice_data_temp_id_unique").on(table.tempId),
]);

export const companySettings = pgTable("company_settings", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	companyName: varchar("company_name", { length: 255 }),
	businessType: varchar("business_type", { length: 100 }),
	establishedYear: varchar("established_year", { length: 4 }),
	registrationNumber: varchar("registration_number", { length: 100 }),
	vatNumber: varchar("vat_number", { length: 50 }),
	addressStreet: varchar("address_street", { length: 255 }),
	addressCity: varchar("address_city", { length: 100 }),
	addressCounty: varchar("address_county", { length: 100 }),
	addressPostCode: varchar("address_post_code", { length: 20 }),
	addressCountry: varchar("address_country", { length: 100 }).default('United Kingdom'),
	contactPhone: varchar("contact_phone", { length: 50 }),
	contactEmail: varchar("contact_email", { length: 255 }),
	contactWebsite: varchar("contact_website", { length: 255 }),
	contactFax: varchar("contact_fax", { length: 50 }),
	description: text(),
	mission: text(),
	vision: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	companyLogoMimeType: varchar("company_logo_mime_type", { length: 100 }),
	companyLogoFileName: varchar("company_logo_file_name", { length: 255 }),
	companyLogoSupabaseFileName: varchar("company_logo_supabase_file_name", { length: 255 }),
	companyLogoPublicUrl: text("company_logo_public_url"),
	companyLogoFileSize: integer("company_logo_file_size"),
	qrCodeFileName: varchar("qr_code_file_name", { length: 255 }),
	qrCodeSupabaseFileName: varchar("qr_code_supabase_file_name", { length: 255 }),
	qrCodePublicUrl: text("qr_code_public_url"),
	qrCodeFileSize: integer("qr_code_file_size"),
	qrCodeMimeType: varchar("qr_code_mime_type", { length: 100 }),
	bankName: varchar("bank_name", { length: 255 }),
	bankSortCode: varchar("bank_sort_code", { length: 20 }),
	bankAccountNumber: varchar("bank_account_number", { length: 50 }),
	bankAccountName: varchar("bank_account_name", { length: 255 }),
	bankIban: varchar("bank_iban", { length: 50 }),
	bankSwiftCode: varchar("bank_swift_code", { length: 20 }),
}, (table) => [
	index("idx_company_settings_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "company_settings_dealer_id_dealers_id_fk"
		}),
	unique("company_settings_dealer_id_unique").on(table.dealerId),
]);

export const dealerLogos = pgTable("dealer_logos", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	logoFileName: varchar("logo_file_name", { length: 255 }),
	logoSupabaseFileName: varchar("logo_supabase_file_name", { length: 255 }),
	logoPublicUrl: text("logo_public_url"),
	logoFileSize: integer("logo_file_size"),
	logoMimeType: varchar("logo_mime_type", { length: 100 }),
	assignedBy: uuid("assigned_by").notNull(),
	assignedAt: timestamp("assigned_at", { mode: 'string' }).defaultNow().notNull(),
	isActive: boolean("is_active").default(true).notNull(),
	notes: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_dealer_logos_active").using("btree", table.dealerId.asc().nullsLast().op("bool_ops"), table.isActive.asc().nullsLast().op("bool_ops")),
	index("idx_dealer_logos_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	foreignKey({
			columns: [table.assignedBy],
			foreignColumns: [dealers.id],
			name: "dealer_logos_assigned_by_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "dealer_logos_dealer_id_dealers_id_fk"
		}),
]);

export const savedInvoices = pgTable("saved_invoices", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	invoiceNumber: varchar("invoice_number", { length: 255 }).notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	userId: varchar("user_id", { length: 255 }).notNull(),
	invoiceData: jsonb("invoice_data").notNull(),
	customerName: varchar("customer_name", { length: 255 }).notNull(),
	vehicleRegistration: varchar("vehicle_registration", { length: 50 }).notNull(),
	saleType: varchar("sale_type", { length: 50 }).notNull(),
	invoiceType: varchar("invoice_type", { length: 100 }).notNull(),
	totalAmount: varchar("total_amount", { length: 50 }).notNull(),
	status: varchar({ length: 50 }).default('draft').notNull(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	lastAccessedAt: timestamp("last_accessed_at", { mode: 'string' }).defaultNow().notNull(),
	invoiceTo: varchar("invoice_to", { length: 100 }),
	remainingBalance: varchar("remaining_balance", { length: 50 }).default('0'),
	isPaid: boolean("is_paid").default(false).notNull(),
});

export const saleDetails = pgTable("sale_details", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	saleDate: timestamp("sale_date", { mode: 'string' }).notNull(),
	salePrice: numeric("sale_price", { precision: 10, scale:  2 }),
	firstName: varchar("first_name", { length: 255 }),
	lastName: varchar("last_name", { length: 255 }),
	emailAddress: varchar("email_address", { length: 255 }),
	contactNumber: varchar("contact_number", { length: 50 }),
	addressFirstLine: varchar("address_first_line", { length: 255 }),
	addressPostCode: varchar("address_post_code", { length: 20 }),
	paymentMethod: varchar("payment_method", { length: 50 }).default('cash').notNull(),
	cashAmount: numeric("cash_amount", { precision: 10, scale:  2 }),
	bacsAmount: numeric("bacs_amount", { precision: 10, scale:  2 }),
	financeAmount: numeric("finance_amount", { precision: 10, scale:  2 }),
	partExAmount: numeric("part_ex_amount", { precision: 10, scale:  2 }),
	warrantyType: varchar("warranty_type", { length: 50 }).default('none').notNull(),
	deliveryDate: timestamp("delivery_date", { mode: 'string' }),
	deliveryAddress: text("delivery_address"),
	documentationComplete: boolean("documentation_complete").default(false),
	keyHandedOver: boolean("key_handed_over").default(false),
	customerSatisfied: boolean("customer_satisfied").default(false),
	vulnerabilityMarker: boolean("vulnerability_marker").default(false),
	depositPaid: boolean("deposit_paid").default(false),
	vehiclePurchased: boolean("vehicle_purchased").default(false),
	enquiry: boolean().default(false),
	gdprConsent: boolean("gdpr_consent").default(false),
	salesMarketingConsent: boolean("sales_marketing_consent").default(false),
	requiresAdditionalSupport: boolean("requires_additional_support").default(false),
	notes: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
	depositAmount: numeric("deposit_amount", { precision: 10, scale:  2 }),
	registration: varchar({ length: 50 }),
	monthOfSale: varchar("month_of_sale", { length: 20 }),
	quarterOfSale: varchar("quarter_of_sale", { length: 10 }),
	deliveryType: varchar("delivery_type", { length: 20 }).default('collection'),
	deliveryPrice: numeric("delivery_price", { precision: 10, scale:  2 }),
	cardAmount: numeric("card_amount", { precision: 10, scale:  2 }),
	requiredAmount: numeric("required_amount", { precision: 10, scale:  2 }),
	customerId: uuid("customer_id"),
	depositDate: timestamp("deposit_date", { mode: 'string' }),
	wheelNuts: boolean("wheel_nuts").default(false),
	tyrePressures: boolean("tyre_pressures").default(false),
	tyreSensors: boolean("tyre_sensors").default(false),
	oilLevel: boolean("oil_level").default(false),
	coolantLevel: boolean("coolant_level").default(false),
	screenWash: boolean("screen_wash").default(false),
	lockingNutGloveBox: boolean("locking_nut_glove_box").default(false),
	bookPackGloveBox: boolean("book_pack_glove_box").default(false),
	inflationKit: boolean("inflation_kit").default(false),
	keyBatteries: boolean("key_batteries").default(false),
	batteryTest: boolean("battery_test").default(false),
	testDriver: boolean("test_driver").default(false),
	adequateDriveAwayFuel: boolean("adequate_drive_away_fuel").default(false),
	additionalText: text("additional_text"),
	completionDate: timestamp("completion_date", { mode: 'string' }),
	washerJets: boolean("washer_jets").default(false),
	wipers: boolean().default(false),
	bulbs: boolean().default(false),
	totalFinanceAddOn: numeric("total_finance_add_on", { precision: 10, scale:  2 }),
	totalCustomerAddOn: numeric("total_customer_add_on", { precision: 10, scale:  2 }),
	businessId: uuid("business_id"),
}, (table) => [
	index("idx_sale_details_customer_id").using("btree", table.customerId.asc().nullsLast().op("uuid_ops")),
	index("idx_sale_details_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_sale_details_sale_date").using("btree", table.saleDate.asc().nullsLast().op("timestamp_ops")),
	index("idx_sale_details_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.businessId],
			foreignColumns: [businesses.id],
			name: "sale_details_business_id_businesses_id_fk"
		}),
	foreignKey({
			columns: [table.customerId],
			foreignColumns: [customers.id],
			name: "sale_details_customer_id_customers_id_fk"
		}),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "sale_details_dealer_id_dealers_id_fk"
		}),
]);

export const serviceDetails = pgTable("service_details", {
	id: serial().primaryKey().notNull(),
	stockId: varchar("stock_id", { length: 255 }).notNull(),
	dealerId: uuid("dealer_id").notNull(),
	stockReference: varchar("stock_reference", { length: 255 }),
	registration: varchar({ length: 50 }),
	serviceHistory: varchar("service_history", { length: 20 }).notNull(),
	numberOfServices: integer("number_of_services"),
	lastServiceDate: date("last_service_date"),
	majorServiceWork: varchar("major_service_work", { length: 300 }),
	notes: text(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_service_details_dealer_id").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_service_details_stock_id").using("btree", table.stockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "service_details_dealer_id_dealers_id_fk"
		}),
]);

export const externalNotifications = pgTable("external_notifications", {
	id: uuid().defaultRandom().primaryKey().notNull(),
	dealerId: uuid("dealer_id").notNull(),
	enquiryType: varchar("enquiry_type", { length: 50 }).notNull(),
	personalTitle: varchar("personal_title", { length: 20 }),
	personalFirstName: varchar("personal_first_name", { length: 255 }),
	personalLastName: varchar("personal_last_name", { length: 255 }),
	personalEmail: varchar("personal_email", { length: 255 }),
	personalPhoneNumber: varchar("personal_phone_number", { length: 50 }),
	personalGender: varchar("personal_gender", { length: 20 }),
	personalCountryOfOrigin: varchar("personal_country_of_origin", { length: 100 }),
	personalDateOfBirth: varchar("personal_date_of_birth", { length: 20 }),
	personalMaritalStatus: varchar("personal_marital_status", { length: 50 }),
	personalDependents: integer("personal_dependents"),
	personalAddress: text("personal_address"),
	vehicleStockId: varchar("vehicle_stock_id", { length: 255 }),
	vehicleMake: varchar("vehicle_make", { length: 100 }),
	vehicleModel: varchar("vehicle_model", { length: 100 }),
	vehicleRegistration: varchar("vehicle_registration", { length: 50 }),
	vehicleMileage: varchar("vehicle_mileage", { length: 50 }),
	vehicleYear: varchar("vehicle_year", { length: 10 }),
	vehicleRecentValuations: text("vehicle_recent_valuations"),
	vehiclePrice: numeric("vehicle_price", { precision: 10, scale:  2 }),
	vehicleInitialDeposit: numeric("vehicle_initial_deposit", { precision: 10, scale:  2 }),
	vehicleLoanTerm: integer("vehicle_loan_term"),
	vehicleApr: numeric("vehicle_apr", { precision: 5, scale:  2 }),
	vehicleAmountToFinance: numeric("vehicle_amount_to_finance", { precision: 10, scale:  2 }),
	vehicleMonthlyPayment: numeric("vehicle_monthly_payment", { precision: 10, scale:  2 }),
	userVehicleMake: varchar("user_vehicle_make", { length: 100 }),
	userVehicleModel: varchar("user_vehicle_model", { length: 100 }),
	userVehicleRegistration: varchar("user_vehicle_registration", { length: 50 }),
	userVehicleMileage: varchar("user_vehicle_mileage", { length: 50 }),
	userVehicleYear: varchar("user_vehicle_year", { length: 10 }),
	userVehicleRecentValuations: text("user_vehicle_recent_valuations"),
	findYourNextCarEnquiryType: varchar("find_your_next_car_enquiry_type", { length: 50 }),
	findYourNextCarVehiclePreferences: text("find_your_next_car_vehicle_preferences"),
	testDriveIsTestDrive: boolean("test_drive_is_test_drive"),
	testDriveDate: varchar("test_drive_date", { length: 20 }),
	testDriveTime: varchar("test_drive_time", { length: 20 }),
	testDriveAdditionalRequirements: text("test_drive_additional_requirements"),
	employmentStatus: varchar("employment_status", { length: 50 }),
	employmentAnnualIncome: numeric("employment_annual_income", { precision: 12, scale:  2 }),
	employmentEmployerName: varchar("employment_employer_name", { length: 255 }),
	employmentTimeInEmployment: varchar("employment_time_in_employment", { length: 100 }),
	employmentGrossAnnualIncome: numeric("employment_gross_annual_income", { precision: 12, scale:  2 }),
	financeMonthlyExpenses: numeric("finance_monthly_expenses", { precision: 10, scale:  2 }),
	financeExistenceCreditCommitments: numeric("finance_existence_credit_commitments", { precision: 10, scale:  2 }),
	bankAccountHolderName: varchar("bank_account_holder_name", { length: 255 }),
	bankName: varchar("bank_name", { length: 255 }),
	bankSortCode: varchar("bank_sort_code", { length: 20 }),
	bankAccountNumber: varchar("bank_account_number", { length: 50 }),
	bankTimeWithBank: varchar("bank_time_with_bank", { length: 100 }),
	reservationAmount: numeric("reservation_amount", { precision: 10, scale:  2 }),
	notes: text(),
	status: varchar({ length: 50 }).default('new').notNull(),
	priority: varchar({ length: 20 }).default('medium').notNull(),
	assignedTo: uuid("assigned_to"),
	sourceWebsite: varchar("source_website", { length: 255 }),
	sourceIp: varchar("source_ip", { length: 45 }),
	userAgent: text("user_agent"),
	isRead: boolean("is_read").default(false).notNull(),
	readAt: timestamp("read_at", { mode: 'string' }),
	respondedAt: timestamp("responded_at", { mode: 'string' }),
	lastContactedAt: timestamp("last_contacted_at", { mode: 'string' }),
	metadata: jsonb(),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_external_notifications_assigned_to").using("btree", table.assignedTo.asc().nullsLast().op("uuid_ops")),
	index("idx_external_notifications_created_at").using("btree", table.createdAt.asc().nullsLast().op("timestamp_ops")),
	index("idx_external_notifications_dealer").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops")),
	index("idx_external_notifications_dealer_status").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops"), table.status.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_dealer_type").using("btree", table.dealerId.asc().nullsLast().op("uuid_ops"), table.enquiryType.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_email").using("btree", table.personalEmail.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_enquiry_type").using("btree", table.enquiryType.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_is_read").using("btree", table.isRead.asc().nullsLast().op("bool_ops")),
	index("idx_external_notifications_phone").using("btree", table.personalPhoneNumber.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_priority").using("btree", table.priority.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_source_website").using("btree", table.sourceWebsite.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_status").using("btree", table.status.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_status_priority").using("btree", table.status.asc().nullsLast().op("text_ops"), table.priority.asc().nullsLast().op("text_ops")),
	index("idx_external_notifications_vehicle_stock").using("btree", table.vehicleStockId.asc().nullsLast().op("text_ops")),
	foreignKey({
			columns: [table.assignedTo],
			foreignColumns: [dealers.id],
			name: "external_notifications_assigned_to_dealers_id_fk"
		}),
	foreignKey({
			columns: [table.dealerId],
			foreignColumns: [dealers.id],
			name: "external_notifications_dealer_id_dealers_id_fk"
		}),
]);

export const dvlaVehicleData = pgTable("dvla_vehicle_data", {
	id: serial().primaryKey().notNull(),
	registrationNumber: varchar("registration_number", { length: 20 }).notNull(),
	make: varchar({ length: 100 }),
	colour: varchar({ length: 50 }),
	fuelType: varchar("fuel_type", { length: 50 }),
	yearOfManufacture: integer("year_of_manufacture"),
	engineCapacity: integer("engine_capacity"),
	co2Emissions: integer("co2_emissions"),
	motStatus: varchar("mot_status", { length: 50 }),
	motExpiryDate: date("mot_expiry_date"),
	taxStatus: varchar("tax_status", { length: 50 }),
	taxDueDate: date("tax_due_date"),
	typeApproval: varchar("type_approval", { length: 10 }),
	wheelplan: varchar({ length: 100 }),
	revenueWeight: integer("revenue_weight"),
	markedForExport: boolean("marked_for_export").default(false),
	dateOfLastV5CIssued: date("date_of_last_v5c_issued"),
	monthOfFirstRegistration: varchar("month_of_first_registration", { length: 10 }),
	dvlaLastChecked: timestamp("dvla_last_checked", { mode: 'string' }).defaultNow().notNull(),
	dvlaDataRaw: jsonb("dvla_data_raw"),
	createdAt: timestamp("created_at", { mode: 'string' }).defaultNow().notNull(),
	updatedAt: timestamp("updated_at", { mode: 'string' }).defaultNow().notNull(),
}, (table) => [
	index("idx_dvla_last_checked").using("btree", table.dvlaLastChecked.asc().nullsLast().op("timestamp_ops")),
	index("idx_dvla_mot_expiry").using("btree", table.motExpiryDate.asc().nullsLast().op("date_ops")),
	index("idx_dvla_mot_status").using("btree", table.motStatus.asc().nullsLast().op("text_ops")),
	index("idx_dvla_registration").using("btree", table.registrationNumber.asc().nullsLast().op("text_ops")),
	unique("dvla_vehicle_data_registration_number_unique").on(table.registrationNumber),
]);
